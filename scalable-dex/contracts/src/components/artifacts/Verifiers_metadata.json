{
	"compiler": {
		"version": "0.6.12+commit.27d51765"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "DEPOSIT_CANCEL_DELAY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "FREEZE_GRACE_PERIOD",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_FORCED_ACTIONS_REQS_PER_BLOCK",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "MAX_VERIFIER_COUNT",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "UNFREEZE_DELAY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "VERIFIER_REMOVAL_DELAY",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "verifier",
						"type": "address"
					}
				],
				"name": "announceVerifierRemovalIntent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getRegisteredVerifiers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "_verifers",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "verifierAddress",
						"type": "address"
					}
				],
				"name": "isVerifier",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "verifier",
						"type": "address"
					},
					{
						"internalType": "string",
						"name": "identifier",
						"type": "string"
					}
				],
				"name": "registerVerifier",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "verifier",
						"type": "address"
					}
				],
				"name": "removeVerifier",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"notice": "A Verifier contract is an implementation of a STARK verifier that the exchange service sends STARK proofs to. In addition, the exchange contract can call a verifier to check if a valid proof has been accepted for a given state transition (typically described as a hash on the public input of the assumed proof). The exchange contract will normally query only one verifier contract for proof validity checks. However, in the event that the verifier algorithm needs to updated, additional verifiers may be registered with the exchange contract by the contract :sol:mod:`MainGovernance`. Such new verifiers are then also be required to attest to the validity of state transitions and only if all the verifiers attest to the validity the state transition is accepted. Removal of verifiers is also the responsibility of the :sol:mod:`MainGovernance`. The removal process is more sensitive than verifier registration as it may affect the soundness of the system. Hence, this is performed in two steps: 1. The :sol:mod:`MainGovernance` first announces the intent to remove a verifier by calling :sol:func:`announceVerifierRemovalIntent` 2. After the expiration of a `VERIFIER_REMOVAL_DELAY` time lock, actual removal may be performed by calling :sol:func:`removeVerifier` The removal delay ensures that a user concerned about the soundness of the system has ample time to leave the exchange.",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"scalable-dex/contracts/src/components/Verifiers.sol": "Verifiers"
		},
		"evmVersion": "istanbul",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"scalable-dex/contracts/src/components/GovernanceStorage.sol": {
			"keccak256": "0x05c1eee874dc7af54100fdea4e5e625f9c0a987f2fa93d575816c214335f258e",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://f82e5aad4b6ffa4b268d967786c99eb520a30d260c257097a8b431df0b430456",
				"dweb:/ipfs/QmSvPK5ij8CRt1cM1AXaNeStD3ufiQquqqtAUD5utDtEYL"
			]
		},
		"scalable-dex/contracts/src/components/MainStorage.sol": {
			"keccak256": "0x6e4b8cc16cf7a2d21c5e071615c89112657f98038e2f229e5e94d9686137a967",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://a07a43332b9e70375ecc34bed0f41fc59a69af47c2637d122c7199cc2a0c80ad",
				"dweb:/ipfs/QmYNjY7BM8bVxxVvUpZaAEcAehtkyRJgoi2oEtE5vqoJSC"
			]
		},
		"scalable-dex/contracts/src/components/Verifiers.sol": {
			"keccak256": "0xf30420e6c0a09d38e9a2a2d04284e2d11b1778d198a6391966aef5597770f2b9",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://c907990369dcb285102da8442198c5f8ff75b198044751d1b61e2931ea15452e",
				"dweb:/ipfs/QmPUCTQsp4V7MwcUQerDu3tpn52T7EU7sy4J1MtK92jMpp"
			]
		},
		"scalable-dex/contracts/src/interfaces/MApprovalChain.sol": {
			"keccak256": "0x10e01fd64ba4e7e5466405014997e34614b752d0e2b330621b0685c456384afd",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://702a258c9f7dc72974435aa0be13eca480db4f934a44ddddcbf9ad4e6bcaae74",
				"dweb:/ipfs/QmSyzpkMVMHDcYdfq5RhkQzHuEcENRnntxZBe2xk69LG7T"
			]
		},
		"scalable-dex/contracts/src/libraries/Common.sol": {
			"keccak256": "0x048705ce1a855e18f5b2ddbdb860c84fa5d67840f3dcad055d93fd5ac97c57b1",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://fee7ddf26266b4ad9fe04086946933ef7fd32fb9351563f007532f7217a5a45c",
				"dweb:/ipfs/Qmaosx5ioDb2DpzWCYLdh6XhE6rrNwaWCudSd7E7XeH1DK"
			]
		},
		"scalable-dex/contracts/src/libraries/LibConstants.sol": {
			"keccak256": "0x8bc90311d918be6e9e0440a0c9861e43abe5ff07de15aa57bba97e486dc1d18c",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://ab4a32633b04b94bc4a43c2f04d79d6785d709ecee05d082398b1328c4b50ea4",
				"dweb:/ipfs/QmQbPYoVBRAVaA7CRU7mY5a7iMFb61EShxTYRR2RCUCFUK"
			]
		},
		"scalable-dex/contracts/src/upgrade/ProxyStorage.sol": {
			"keccak256": "0xe409a38c188a488384635187e06ca3e565346e39e3db7a864879110073ff0725",
			"license": "Apache-2.0.",
			"urls": [
				"bzz-raw://28126e08e659ca388aa4230707f8558d0d7e9600cf02cad6fcd725f1562a3917",
				"dweb:/ipfs/Qmd36xSnxFeG6AyQzgvksbTP3gTUw7fegWYVkS8UKLy1Tz"
			]
		}
	},
	"version": 1
}